{"version":3,"sources":["modules/server-state/add-server-scenario/AddServerScenario.tsx","modules/server-state/ServerStateMenu.tsx","modules/server-state/ServerState.tsx"],"names":["useStyles","makeStyles","theme","createStyles","closeButton","position","right","spacing","top","color","palette","grey","AddServerScenario","useState","open","setOpen","classes","useTheme","fullScreen","useMediaQuery","breakpoints","down","useContext","AppStateContext","addServerStateScenario","serverState","scenarioServerState","setScenarioServerState","name","setName","handleClose","a","id","Date","now","toString","state","code","JSON","stringify","Button","onClick","Dialog","closeAfterTransition","aria-labelledby","maxWidth","onClose","DialogTitle","disableTypography","style","minWidth","Typography","variant","IconButton","aria-label","className","Close","DialogContent","TextField","autoFocus","fullWidth","label","margin","value","onChange","event","target","DialogContentText","Editor","autoHeight","language","onSave","parse","DialogActions","ServerStateMenu","actions","anchorEl","setAnchorEl","Boolean","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","PaperProps","maxHeight","ITEM_HEIGHT","width","map","action","MenuItem","key","ServerState","resetServerState","updateServerState","deleteStateScenario","editing","setEditing","invalidJson","setInvalidJson","draftCode","setDraftCode","navigator","clipboard","readText","e","console","error","writeText","display","justifyContent","alignItems","disabled","Paper","padding","src"],"mappings":"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","file":"static/js/3.f8b69016.chunk.js","sourcesContent":["import { IconButton, Typography, useMediaQuery } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  useTheme,\n} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { Close } from '@material-ui/icons';\nimport React, { ChangeEvent, useContext, useState } from 'react';\nimport { AppStateContext } from '../../../App';\nimport { Editor } from '../../../common/Editor';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  }),\n);\n\nexport default function AddServerScenario() {\n  const [open, setOpen] = useState(false);\n  const classes = useStyles();\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\n  const { addServerStateScenario, serverState } = useContext(AppStateContext);\n  const [scenarioServerState, setScenarioServerState] = useState(serverState);\n  const [name, setName] = useState('');\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleNameChange(event: ChangeEvent<HTMLInputElement>) {\n    setName(event.target.value);\n  }\n\n  async function handleSubmit() {\n    await addServerStateScenario({\n      id: Date.now().toString(),\n      name,\n      state: scenarioServerState,\n    });\n    setOpen(false);\n  }\n\n  function handleSave(code: string) {\n    setScenarioServerState(JSON.parse(code));\n  }\n\n  const code = JSON.stringify(scenarioServerState, null, 2);\n\n  return (\n    <>\n      <Button onClick={handleClickOpen}>Add server scenario</Button>\n      <Dialog\n        closeAfterTransition\n        aria-labelledby=\"max-width-dialog-title\"\n        fullScreen={fullScreen}\n        maxWidth=\"md\"\n        open={open}\n        onClose={handleClose}\n      >\n        <DialogTitle\n          disableTypography\n          id=\"max-width-dialog-title\"\n          style={{ minWidth: 500 }}\n        >\n          <Typography variant=\"h6\">Add server scenario</Typography>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={handleClose}\n          >\n            <Close />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            fullWidth\n            id=\"name\"\n            label=\"Scenario name\"\n            margin=\"dense\"\n            value={name}\n            onChange={handleNameChange}\n          />\n        </DialogContent>\n        <DialogContent>\n          <DialogContentText>\n            Modify copy of state before adding\n          </DialogContentText>\n          <Editor autoHeight code={code} language=\"json\" onSave={handleSave} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleSubmit}>Submit</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import React, { useState, MouseEvent } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nconst ITEM_HEIGHT = 48;\n\nexport default function ServerStateMenu({\n  actions,\n}: {\n  actions: Array<{ label: string; onClick: () => void }>;\n}) {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  function handleActionClick(action: () => void) {\n    return () => {\n      handleClose();\n      action();\n    };\n  }\n\n  return (\n    <div>\n      <IconButton\n        aria-controls=\"server-state-menu\"\n        aria-haspopup=\"true\"\n        aria-label=\"more\"\n        onClick={handleClick}\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <Menu\n        keepMounted\n        anchorEl={anchorEl}\n        id=\"server-state-menu\"\n        open={open}\n        PaperProps={{\n          style: {\n            maxHeight: ITEM_HEIGHT * 4.5,\n            width: 200,\n          },\n        }}\n        onClose={handleClose}\n      >\n        {actions.map(({ label, onClick }) => (\n          <MenuItem key={label} onClick={handleActionClick(onClick)}>\n            {label}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n}\n","import { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport React, { useContext, useState } from 'react';\nimport ReactJson from 'react-json-view';\nimport { ServerState as ServerStateInterface } from '../../../sharedTypes';\nimport { AppStateContext } from '../../App';\nimport { Editor } from '../../common/Editor';\nimport AddServerScenario from './add-server-scenario/AddServerScenario';\nimport ServerStateMenu from './ServerStateMenu';\n\nexport default function ServerState() {\n  const {\n    serverState,\n    resetServerState,\n    updateServerState,\n    deleteStateScenario,\n  } = useContext(AppStateContext);\n  const [editing, setEditing] = useState(false);\n  const [invalidJson, setInvalidJson] = useState(false);\n  const [draftCode, setDraftCode] = useState(\n    JSON.stringify(serverState, null, 2),\n  );\n\n  function handleStartEditing() {\n    setEditing(true);\n  }\n\n  function handleDoneEditing() {\n    setEditing(false);\n    updateServerState(JSON.parse(draftCode) as ServerStateInterface);\n  }\n\n  function handleSave(code: string) {\n    setDraftCode(code);\n    try {\n      JSON.parse(code);\n      setInvalidJson(false);\n    } catch (e) {\n      setInvalidJson(true);\n    }\n  }\n\n  async function handleUpdateWithClipboard() {\n    const serverState = await navigator.clipboard.readText();\n\n    try {\n      updateServerState(JSON.parse(serverState));\n    } catch (e) {\n      console.error(['handleUpdateWithClipboard.error'], e.toString());\n    }\n  }\n\n  function handleDeleteScenario() {\n    deleteStateScenario();\n  }\n\n  async function handleCopyToClipboard() {\n    await navigator.clipboard.writeText(JSON.stringify(serverState, null, 2));\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <Typography style={{ margin: 8 }} variant=\"h5\">\n          Server state\n        </Typography>\n        <div style={{ display: 'flex' }}>\n          {editing ? (\n            <Button disabled={invalidJson} onClick={handleDoneEditing}>\n              Done\n            </Button>\n          ) : (\n            <Button onClick={handleStartEditing}>Edit</Button>\n          )}\n          <AddServerScenario />\n          <ServerStateMenu\n            actions={[\n              { label: 'Reset server', onClick: resetServerState },\n              { label: 'Copy to clipboard', onClick: handleCopyToClipboard },\n              {\n                label: 'Update with clipboard',\n                onClick: handleUpdateWithClipboard,\n              },\n              { label: 'Delete scenario', onClick: handleDeleteScenario },\n            ]}\n          />\n        </div>\n      </div>\n      <Paper style={{ padding: 10 }}>\n        {!editing && <ReactJson name=\"state\" src={serverState} />}\n        {editing && (\n          <Editor\n            autoHeight\n            code={draftCode}\n            language=\"json\"\n            onSave={handleSave}\n          />\n        )}\n      </Paper>\n    </>\n  );\n}\n"],"sourceRoot":""}