{"version":3,"sources":["layouts/TabsLayout.tsx"],"names":["LazyEndpoints","lazy","LazyServerState","LazyStateInterface","TabsConfig","value","label","TabsLayout","useContext","AppStateContext","activeTab","changeActiveTab","style","flexGrow","centered","indicatorColor","textColor","onChange","event","newValue","map","key","fallback"],"mappings":"iHAAA,sGAMMA,EAAgBC,gBAAK,kBAAM,wDAC3BC,EAAkBD,gBAAK,kBAC3B,uDAEIE,EAAqBF,gBAAK,kBAC9B,iCAUIG,EAAoB,CACxB,CACEC,MAAO,kBACPC,MAAO,mBAET,CACED,MAAO,cACPC,MAAO,eAET,CACED,MAAO,YACPC,MAAO,cAII,SAASC,IAAc,IAAD,EACIC,qBAAWC,mBAA1CC,EAD2B,EAC3BA,UAAWC,EADgB,EAChBA,gBAMnB,OACE,oCACE,kBAAC,IAAD,CAAOC,MAAO,CAAEC,SAAU,IACxB,kBAAC,IAAD,CACEC,UAAQ,EACRC,eAAe,UACfC,UAAU,UACVX,MAAOK,EACPO,SAZR,SAA+BC,EAAwBC,GACrDR,EAAgBQ,KAaTf,EAAWgB,KAAI,gBAAGf,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACd,kBAAC,IAAD,CAAKe,IAAKhB,EAAOC,MAAOA,EAAOD,MAAOA,SAI7B,oBAAdK,GACC,kBAAC,WAAD,CAAUY,SAAS,8BACjB,kBAACnB,EAAD,OAGW,gBAAdO,GACC,kBAAC,WAAD,CAAUY,SAAS,2BACjB,kBAACpB,EAAD,OAGW,cAAdQ,GACC,kBAAC,WAAD,CAAUY,SAAS,wBACjB,kBAACtB,EAAD","file":"static/js/14.1c039479.chunk.js","sourcesContent":["import { Paper } from '@material-ui/core';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport React, { ChangeEvent, lazy, Suspense, useContext } from 'react';\nimport { AppStateContext } from '../App';\n\nconst LazyEndpoints = lazy(() => import('../modules/endpoints/Endpoints'));\nconst LazyServerState = lazy(() =>\n  import('../modules/server-state/ServerState'),\n);\nconst LazyStateInterface = lazy(() =>\n  import('../modules/state-interface/StateInterface'),\n);\n\nexport type TabKey = 'serverInterface' | 'serverState' | 'endpoints';\n\nexport interface Tab {\n  label: string;\n  value: TabKey;\n}\n\nconst TabsConfig: Tab[] = [\n  {\n    value: 'serverInterface',\n    label: 'State interface',\n  },\n  {\n    value: 'serverState',\n    label: 'State state',\n  },\n  {\n    value: 'endpoints',\n    label: 'Endpoints',\n  },\n];\n\nexport default function TabsLayout() {\n  const { activeTab, changeActiveTab } = useContext(AppStateContext);\n\n  function handleActiveTabChange(event: ChangeEvent<{}>, newValue: TabKey) {\n    changeActiveTab(newValue);\n  }\n\n  return (\n    <>\n      <Paper style={{ flexGrow: 1 }}>\n        <Tabs\n          centered\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          value={activeTab}\n          onChange={handleActiveTabChange}\n        >\n          {TabsConfig.map(({ value, label }) => (\n            <Tab key={value} label={label} value={value} />\n          ))}\n        </Tabs>\n      </Paper>\n      {activeTab === 'serverInterface' && (\n        <Suspense fallback=\"Loading state interface...\">\n          <LazyStateInterface />\n        </Suspense>\n      )}\n      {activeTab === 'serverState' && (\n        <Suspense fallback=\"Loading server state...\">\n          <LazyServerState />\n        </Suspense>\n      )}\n      {activeTab === 'endpoints' && (\n        <Suspense fallback=\"Loading endpoints...\">\n          <LazyEndpoints />\n        </Suspense>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}